[{"name":"Color.LinearRGB","comment":"\n\n\n# Types\n\n@docs LinearRGB\n\n\n# Creating colors\n\n@docs linearRgb, linearRgba\n\n\n# Conversions\n\n@docs fromColor, toColor\n\n","unions":[],"aliases":[{"name":"LinearRGB","comment":" Represents a color in the linear RGB space.\n\nAll components range from 0.0 to 1.0 (inclusive).\n\n","args":[],"type":"{ linearRed : Basics.Float, linearGreen : Basics.Float, linearBlue : Basics.Float, alpha : Basics.Float }"}],"values":[{"name":"fromColor","comment":" Convert a color from [`Color`](https://package.elm-lang.org/packages/avh4/elm-color/1.0.0/Color#Color) (sRGB) to linear RGB.\n\nAll component range from 0.0 to 1.0 (inclusive).\n\n","type":"Color.Color -> Color.LinearRGB.LinearRGB"},{"name":"linearRgb","comment":" Builds a color from red, green and blue components.\n\nAll components range from 0.0 to 1.0 (inclusive).\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Color.LinearRGB.LinearRGB"},{"name":"linearRgba","comment":" Builds a color from red, green, blue and alpha components.\n\nAll components range from 0.0 to 1.0 (inclusive).\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float -> Color.LinearRGB.LinearRGB"},{"name":"toColor","comment":" Convert a color from linear RGB to [`Color`](https://package.elm-lang.org/packages/avh4/elm-color/1.0.0/Color#Color) (sRGB).\n\nAll component range from 0.0 to 1.0 (inclusive).\n\n","type":"Color.LinearRGB.LinearRGB -> Color.Color"}],"binops":[]},{"name":"Color.Oklab","comment":"\n\n\n# Types\n\n@docs Oklab\n\n\n# Creating colors\n\n@docs oklab, oklaba\n\n\n# Conversions\n\n@docs fromColor, toColor\n@docs fromLinearRGB, toLinearRGB\n\n","unions":[],"aliases":[{"name":"Oklab","comment":" A color in the Oklab space.\n\n  - `lightness` ranges from 0.0 to 1.0 (inclusive),\n  - `a` (green/red) ranges from approximatively -0.3 to +0.3,\n  - `b` (blue/yellow) ranges from approximatively -0.3 to +0.3,\n  - `alpha` ranges from 0.0 to 1.0 (inclusive).\n\n","args":[],"type":"{ lightness : Basics.Float, a : Basics.Float, b : Basics.Float, alpha : Basics.Float }"}],"values":[{"name":"fromColor","comment":" Convert a color from [`Color`](https://package.elm-lang.org/packages/avh4/elm-color/1.0.0/Color#Color) (sRGB) to Oklab.\n","type":"Color.Color -> Color.Oklab.Oklab"},{"name":"fromLinearRGB","comment":" Converts a color from linear RGB (red, green, blue) to Oklab.\n\nThe components should be between 0.0 and 1.0 (inclusive).\n\n","type":"Color.LinearRGB.LinearRGB -> Color.Oklab.Oklab"},{"name":"oklab","comment":" Builds a color from its lightness, a (green/red) and b (blue/yellow) components.\n\n  - `lightness` ranges from 0.0 to 1.0 (inclusive),\n  - `a` (green/red) ranges from approximatively -0.3 to +0.3,\n  - `b` (blue/yellow) ranges from approximatively -0.3 to +0.3.\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Color.Oklab.Oklab"},{"name":"oklaba","comment":" Builds a color from its lightness, a (green/red), b (blue/yellow) and alpha components.\n\n  - `lightness` ranges from 0.0 to 1.0 (inclusive),\n  - `a` (green/red) ranges from approximatively -0.3 to +0.3,\n  - `b` (blue/yellow) ranges from approximatively -0.3 to +0.3,\n  - `alpha` ranges from 0.0 to 1.0 (inclusive).\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float -> Color.Oklab.Oklab"},{"name":"toColor","comment":" Convert a color from Oklab to [`Color`](https://package.elm-lang.org/packages/avh4/elm-color/1.0.0/Color#Color) (sRGB).\n","type":"Color.Oklab.Oklab -> Color.Color"},{"name":"toLinearRGB","comment":" Converts a color from Oklab to linear RGB (red, green, blue).\n\nThe output components get clipped at 0 to avoid NaNs.\n\n","type":"Color.Oklab.Oklab -> Color.LinearRGB.LinearRGB"}],"binops":[]},{"name":"Color.Oklch","comment":"\n\n\n# Types\n\n@docs Oklch\n\n\n# Creating colors\n\n@docs oklch, oklcha\n\n\n# Conversions\n\n@docs fromColor, toColor\n@docs fromOklab, toOklab\n\n","unions":[],"aliases":[{"name":"Oklch","comment":" A color in the Oklch space.\n\n  - `lightness` ranges from 0.0 to 1.0 (inclusive),\n  - `chroma` ranges from 0.0 to approximatively 0.37 (inclusive),\n  - `hue` ranges from 0.0 to 1.0 (inclusive),\n  - `alpha` ranges from 0.0 to 1.0 (inclusive).\n\n","args":[],"type":"{ lightness : Basics.Float, chroma : Basics.Float, hue : Basics.Float, alpha : Basics.Float }"}],"values":[{"name":"fromColor","comment":" Convert a color from [`Color`](https://package.elm-lang.org/packages/avh4/elm-color/1.0.0/Color#Color) (sRGB) to Oklch.\n","type":"Color.Color -> Color.Oklch.Oklch"},{"name":"fromOklab","comment":" Convert from Oklab to Oklch.\n","type":"Color.Oklab.Oklab -> Color.Oklch.Oklch"},{"name":"oklch","comment":" Builds a color from its lightness, chroma and hue components.\n\n  - `lightness` ranges from 0.0 to 1.0 (inclusive),\n  - `chroma` ranges from 0.0 to approximatively 0.37 (inclusive),\n  - `hue` ranges from 0.0 to 1.0 (inclusive),\n  - `alpha` ranges from 0.0 to 1.0.\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Color.Oklch.Oklch"},{"name":"oklcha","comment":" Builds a color from its lightness, chroma, hue and alpha components.\n\n  - `lightness` ranges from 0.0 to 1.0 (inclusive),\n  - `chroma` ranges from 0.0 to approximatively 0.37 (inclusive),\n  - `hue` ranges from 0.0 to 1.0 (inclusive),\n  - `alpha` ranges from 0.0 to 1.0.\n\n","type":"Basics.Float -> Basics.Float -> Basics.Float -> Basics.Float -> Color.Oklch.Oklch"},{"name":"toColor","comment":" Convert a color from Oklch to [`Color`](https://package.elm-lang.org/packages/avh4/elm-color/1.0.0/Color#Color) (sRGB).\n","type":"Color.Oklch.Oklch -> Color.Color"},{"name":"toOklab","comment":" Convert from Oklch to Oklab.\n","type":"Color.Oklch.Oklch -> Color.Oklab.Oklab"}],"binops":[]}]